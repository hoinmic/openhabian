import org.openhab.model.script.actions.Timer

val logName = "dehumidifier"

var Timer timer = null

val MAX_HUMIDITY = 70
val MAX_HUMIDITY_EXCEED = 5

val DEHUMIDIFIER_ON_TIME_H = 2

val DEHUMIDIFIER_MIN_POWER_CONSUMPTION_W = 400
val DEHUMIDIFIER_MIN_POWER_WATER_TANK_FULL_W = 50


//------------------------------------------------------------
// Startup
rule "Dehumidifier Startup"
when
  System started
then
  maxHumidity.postUpdate(MAX_HUMIDITY)
  sosHumidity.postUpdate(MAX_HUMIDITY + MAX_HUMIDITY_EXCEED)
  dehumidifier_status.postUpdate("OK")
  dehumidifier_switch.sendCommand(OFF)
  logInfo(logName, "Variables initialized")
end

//------------------------------------------------------------
// Power switch changes
rule "Dehumidifier Turn OFF"
when
  Item dehumidifier_switch changed to OFF
then
  dehumidifier_switch.sendCommand(OFF)
  logInfo(logName, "Send command turn off")
end

rule "Dehumidifier Turn ON"
when
  Item dehumidifier_switch changed to ON
then
  dehumidifier_switch.sendCommand(ON)
  logInfo(logName, "Send command turn on")

  // After a timeout, turn the dehumidifier off
  if (timer === null)
  {
    timer = createTimer(now.plusHours(DEHUMIDIFIER_ON_TIME_H)) [|
          dehumidifier_switch.postUpdate(OFF)
          logInfo(logName, "Timer expiration, turned OFF")
          timer = null   // reset the timer
      ]
  }
end

//------------------------------------------------------------
// Manually action: Handle local button (power switch)
rule "Dehumidifier Local Button"
when
  Item dehumidifier_relay changed
then
  // Manually turned on?
  if ((dehumidifier_relay.state.toString == "true") &&
      (dehumidifier_switch.state == OFF ))
  {
    dehumidifier_switch.postUpdate(ON)
    logInfo(logName, "Locally turned ON")
  }
  // Manually turned off?
  if ((dehumidifier_relay.state.toString == "false") &&
      (dehumidifier_switch.state == ON ))
  {
    dehumidifier_switch.postUpdate(OFF)
    logInfo(logName, "Locally turned OFF")
  }
end

//------------------------------------------------------------
// Automatic action: Exceed maximum humidity (low tariff)
rule "Dehumidifier Maximum Humidity"
when
  Item humidity_htShelly_01 changed or
  Item low_tariff changed or
  Item maxHumidity changed
then
  if (humidity_htShelly_01.state >= maxHumidity.state)
  {
    if (low_tariff.state.toString == "TRUE")
    {
      dehumidifier_switch.postUpdate(ON)
      logInfo(logName, "Start dehumidifier. Exceed maximum humidity. Low tariff. Humidity: " + humidity_htShelly_01.state)
    }
    else
    {
      dehumidifier_switch.postUpdate(OFF)
      logInfo(logName, "Standby dehumidifier. High tariff. Humidity: " + humidity_htShelly_01.state)
    }
  }
  else
  {
    logInfo(logName, "Humidity low. No action required. Humidity: " + humidity_htShelly_01.state)
  }
end

//------------------------------------------------------------
// Automatic action: Massive exceed of maximum humidity
rule "Dehumidifier Update sos Humidity"
when
  Item maxHumidity changed
then
  sosHumidity.postUpdate((maxHumidity.state as DecimalType) + MAX_HUMIDITY_EXCEED)
end

rule "Dehumidifier Massive exceed of humidity"
when
  Item humidity_htShelly_01 changed or
  Item sosHumidity changed or
  Item dehumidifier_switch changed    // if dehumidifier in some way get switched off (ex. timer expired ...)
then
  if (humidity_htShelly_01.state >= sosHumidity.state)
  {
    dehumidifier_switch.postUpdate(ON)
    logInfo(logName, "Start dehumidifier. Massive exceed of maximum humidity. Humidity: " + humidity_htShelly_01.state)
  }
end

//------------------------------------------------------------
// Dehumidifier Status
rule "Dehumidifier Status"
when
  Item dehumidifier_power changed or
  Item dehumidifier_switch changed
then
  if (dehumidifier_network_status.state.toString == "ON")
  {
    if (dehumidifier_switch.state == ON )
    {
      if (dehumidifier_power.state > DEHUMIDIFIER_MIN_POWER_CONSUMPTION_W)
      {
        dehumidifier_status.postUpdate("OK")
        logInfo (logName, "Dehumidifier is working in normal range: "+dehumidifier_power.state+"W")
      } 
      else if (dehumidifier_power.state > DEHUMIDIFIER_MIN_POWER_WATER_TANK_FULL_W)
      {
        dehumidifier_status.postUpdate("Water tank full")
        logInfo (logName, "Water tank full: "+dehumidifier_power.state+"W")
      }
      else
      {
        dehumidifier_status.postUpdate("Error")
        logInfo (logName, "Dehumidifier Error: "+dehumidifier_power.state+"W")
      }
    }
    else
    {
      dehumidifier_status.postUpdate("OK")
      logInfo (logName, "Dehumidifier off: "+dehumidifier_power.state+"W")
    }
  }
  else
  {
    dehumidifier_status.postUpdate("Connection problem")
    logInfo (logName, "No connection to dehumidifier switch")
  }
end